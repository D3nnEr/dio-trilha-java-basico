Tudo em Java é orientada em objeto

****

ANATOMIA DA CLASSE:  basicamente consolida o aspecto estrutural 

##99% COMEÇA COM 

public class MinhaClass{

##// CODIGO AQUI

}

 ##Por padrão as todas as classes, as primeiras letras tem que ser MAIUSCULA

##O METODO MAIN: uma caracteristica única PADRAO, 

public class MinhaClass{

public static void main (String [] args) {

​	System.out.print ("mensagem");

}

}

##System: Classe que tem funçao de input (in) e Print (out)

Toda classe precisa exister dentro do src no diretorio com As primeiras letras MAIUSCULA

sempre .java

##Denner.java, DennerHenrique.java



#NOME DE VARIAVEL: 

####Toda variavel de ser escrito com letra minuscula, as palavras composta a segunda é MAIUSCULA exemplo: dennerHenrique

o nome dessa pratica para nomear as variaveis dessa forma se chama "camelCase".

para declarar uma variável não podemos utilizar caracteres,números e simbolos, porem devemos seguir algumas regras  de linguagem.

####pode conter apenas :   

####letras,  

####_ (underline), 

#### $  

####ou os numeros de 0 a 9 

deve obrigatoriamente se iniciar por uma letra (preferencialmente),

_ (underline),

ou

$





### JAMAIS COM NUMERO

##NAO PODE CONTER ESPAÇOS

##Não podemos usar palavas-chave da linguagem 

## O nome deve ser único dentro de um esboço

exemplo 

int numero$um = 1;

int numero1 = 1;

int numeroum = 1;



#para declarar uma Variavel 

Tipo NomeBemDefinido = Atribuição (opcional em alguns casos)



public class MinhaClasse {



public static void main (String [ ] args ) {

​	String meuNome = "Denner";	

​	int anoFabricacao = 2022;

​	boolean verdadeira = false;

​	anoFabricacao = 2018;

}

}

####string (tipo) 

#### meuNome (NomeBemDefinido)

####int (tipo inteiro)

#### boolean (tipo para valores logicos) sim/não verdadeiro/falso



# Declarando METODOS

TipoRetorno NomeObjetivoNoInfinitivo Parametro(s)



int somar (int numeroUm,  int numero2 )

String formatarCep (long cep)

#####para realizar uma soma no minino dos parametros, todos os metodos em java, precisa ser aplicado no infinitivo , (somar, fomatar, arquivar, incluir)



public class MinhaClasse {

public static void main (String [] args) {

​    String primeiroNome = "Denner";

​    String segundoNome = "Henrique";

​    String nomeCompleto = nomeCompleto (primeiroNome,segundoNome);

​    System.out.println(nomeCompleto);

}

public static String nomeCompleto (String primeiroNome, String segundoNome) {

​    return "Resultado do método " + primeiroNome.concat(" ").concat(segundoNome);

} 

​    

}



#### return paralavra reservada 

#### concat metodo concatenar

####todo metrodo tem sem parametro 





# INDENTAÇÃO 

termo para escrever o codigo do programa de forma hierarquica



public class BoletimEstudantil {

​    public static void main(String [] args) {

​        int mediaFinal = 10;

​        if(mediaFinal<6)

​            System.out.println("REPROVADO");

​        else if (mediaFinal==6)

​            System.out.println("PROVA MINERVA");

​        else

​            System.out.println("APROVADO");

​        

​    }

}

# JAVA BENS

atraves de conveçoes, formas de escritas com clareza e definição nos arquivos, variaveis e metodos.



#####Tipos Primitivos em Java

###### int, byte, short, long, float, double e char

esses tipos não são considerados objetos, e portanto represente valores brutos , armazanado na pila de memoria 

###### int, byte, short, long , para NUMEROS , #

###### float, double , para partes FRACIONAIS , 



# CONSTANTES

são valores que nao pode ser modificada, sempre em CAIXA ALTA

para garantir sempre colocar um 

tipo **final**



# OPERADORES

##### ARITMÉTICOS

#####                             UNÁRIOS

#####                                                    RELACIONAIS

#####                                                                                     LÓGICO

#####                                                                                                           TERNÁRIO

#####Simbolos especiais que tem siginificados propio para linguagem, e estão associados a determinadas operações

sinal de igual ( = )

######operador de atribuição a uma variavel



# ARITMÉTICOS 

#####soma , subtração, multiplicação, divisao

double soma = 10.5 + 15.7;

int subtração = 113 -25 ;

int muliplicação = 20*7;

int divisão = 15 / 3;

int modulo = 18 % 3;

double resultado =(10 * 7 ) + (20/4);

###*OPERADOR DE ADIÇÃO QUANDO STRING ELE JUNTA AS PALAVRAS



# UNÁRIOS:

#####ele faz a incrementação, decrementar, inverter valores numeros e booleanos

(+) unario **positivo**

(-) unario **neativo**

(++) unario **invremento de valor**

(--) unario **decremento de valor**



public class Operadores {

​    public static void main(String[] args) {

​	int numero = 5;



​	System.out.println( ++ numero);

​	System.out.println(numero);

​    }

}

##### exemplo para encrementar valor, nesse caso o resultado seria 6 

#####se decrementer com (--) valor, nesse caso o resultado seria 4 

public class Operadores {

​    public static void main(String[] args) {

​	boolean variavel = true;



​	variavel = !variavel;

​	System.out.println(variavel);

​    }

}

##### resultado é false , com isso conseguimos transformar uma variavel verdadeira,do tipo boolean para falso 



# OPERADOR TERNARIO

##### FORMA RESUMIDA PARA DEFINIR UMA CONDIÇÃO E ESCOLHER POR UM DENTRO DE DOI US VALORES.

de forma que todas estrutura é escrita em uma unica linha de codigo

representados pelo simbolo ? e :

public class Operadores {

​    public static void main(String[] args) {

​	int a, b;

​	a = 5;

​	b= 6;

​	String resultado = a==b? "verdadeiro" : "false";

​	System.out.println(resultado);

​    }

}

##### resultado falso , pois A não é igual B.



# OPERADOR RELACIONAIS

#####RELACIONAIS AVALIAM A RELAÇÃO ENTRE DUAS VARIAVEIS OU EXPRESSOES, RETORNANDO UM VALOR BOOLEANO COMO RESULTADO



== verificar se é igual , 

, !- verificar se é diferente

, > verificar se é maior

, >= verificar se é maior ou igual a outra

, < verificar se é menor

, <= verificar se é menor ou igual a outra



public class Operadores {

   public static void main(String[] args) {

​    

​        int numero1 = 1;

​        int numero2 = 2;

​        boolean simNao = numero1 == numero2;

​        if(numero1 < numero2){

​            System.out.println("A NOSSA CONDIÇÃO É VERDADEIRA");

​        }

​        System.out.println("numeroUm é igual a numeroDois?" + simNao);

​        simNao = numero1 != numero2;

​        System.out.println("numeroUm é Diferente a numeroDois?" + simNao);

​        simNao = numero1 > numero2;

​        System.out.println("numeroUm é Maior a numeroDois?" + simNao);

​    }   

}

#### resposta:

A NOSSA CONDIÇÃO É VERDADEIRA
numeroUm é igual a numeroDois?false
numeroUm é Diferente a numeroDois?true
numeroUm é Maior a numeroDois?false



# OPERADOR LOGICO

##### REPRESENTA O RECURSO DE CRIAR EXPRESSÕES , APARTIR DE JUNÇÃO DE DUAS OU MAIS EXPRESSÕES , PARA SABER SE É VERDADEIRA 



&& valida se as duas condiçoes são verdadeiras

|| verifica se as duas condiçoes são verdadeiras

#exemplo1:

public class OperadoresLogico {

​    public static void main(String[] args) {

​        boolean condicao1=true;

​        boolean condicao2=false;

​        if(condicao1 && condicao2){

​            System.out.println("as duas condições são verdadeiras");

​        }

​        if(condicao1 || condicao2){

​            System.out.println("Uma duas condições são é verdadeiras");

​        }

​        System.out.println("fim");

​    }

}

##### resultado : 

######Uma duas condições são é verdadeiras

######fim

#exemplo2:

public class OperadoresLogico {

​    public static void main(String[] args) {

​        boolean condicao1=true;

​        boolean condicao2=false;

​        if(condicao1 && condicao2){

​            System.out.println("as duas condições são verdadeiras");

​        }

​        if(condicao1 || condicao2){

​            System.out.println("Uma duas condições são é verdadeiras");

​        }

​        System.out.println("fim");

​    }

}

##### resultado :

######as duas condições são verdadeiras

######Uma duas condições são é verdadeiras

######fim